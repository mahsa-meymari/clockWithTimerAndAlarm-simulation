
AVRASM ver. 2.1.30  \\Mac\Home\Documents\code\Debug\List\clock.asm Sat Apr 04 12:10:55 2020

\\Mac\Home\Documents\code\Debug\List\clock.asm(1088): warning: Register r4 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1089): warning: Register r5 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1090): warning: Register r6 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1091): warning: Register r7 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1092): warning: Register r8 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1093): warning: Register r9 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1094): warning: Register r10 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1095): warning: Register r11 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1096): warning: Register r12 already defined by the .DEF directive
\\Mac\Home\Documents\code\Debug\List\clock.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hour=R4
                 	.DEF _hour_msb=R5
                 	.DEF _minute=R6
                 	.DEF _minute_msb=R7
                 	.DEF _second=R8
                 	.DEF _second_msb=R9
                 	.DEF _alarmHour=R10
                 	.DEF _alarmHour_msb=R11
                 	.DEF _alarmMinute=R12
                 	.DEF _alarmMinute_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0058 	JMP  __RESET
000002 940c 00eb 	JMP  _ext_int0_isr
000004 940c 0131 	JMP  _ext_int1_isr
000006 940c 0160 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0085 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x3:
000038 6c63
000039 636f
00003a 006b
00003b 0000      	.DB  0x63,0x6C,0x6F,0x63,0x6B,0x0,0x0,0x0
00003c 0000
00003d 6c61
00003e 7261
00003f 006d      	.DB  0x0,0x0,0x61,0x6C,0x61,0x72,0x6D,0x0
000040 0000
000041 0000
000042 6974
000043 656d      	.DB  0x0,0x0,0x0,0x0,0x74,0x69,0x6D,0x65
\\Mac\Home\Documents\code\Debug\List\clock.asm(1144): warning: .cseg .db misalignment - padding zero byte
000044 0072      	.DB  0x72
                 _0x0:
000045 6425
000046 6425
000047 253a
000048 2564      	.DB  0x25,0x64,0x25,0x64,0x3A,0x25,0x64,0x25
000049 3a64
00004a 6425
00004b 6425
\\Mac\Home\Documents\code\Debug\List\clock.asm(1147): warning: .cseg .db misalignment - padding zero byte
00004c 0000      	.DB  0x64,0x3A,0x25,0x64,0x25,0x64,0x0
                 _0x2020003:
00004d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004e 000a      	.DW  0x0A
00004f 0004      	.DW  0x04
000050 0066      	.DW  __REG_VARS*2
                 
000051 0019      	.DW  0x19
000052 0268      	.DW  _modes
000053 0070      	.DW  _0x3*2
                 
000054 0002      	.DW  0x02
000055 02b2      	.DW  __base_y_G101
000056 009a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000057 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000058 94f8      	CLI
000059 27ee      	CLR  R30
00005a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005b e0f1      	LDI  R31,1
00005c bffb      	OUT  GICR,R31
00005d bfeb      	OUT  GICR,R30
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000068 93ed      	ST   X+,R30
000069 9701      	SBIW R24,1
00006a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006b e9ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006d 9185      	LPM  R24,Z+
00006e 9195      	LPM  R25,Z+
00006f 9700      	SBIW R24,0
000070 f061      	BREQ __GLOBAL_INI_END
000071 91a5      	LPM  R26,Z+
000072 91b5      	LPM  R27,Z+
000073 9005      	LPM  R0,Z+
000074 9015      	LPM  R1,Z+
000075 01bf      	MOVW R22,R30
000076 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000077 9005      	LPM  R0,Z+
000078 920d      	ST   X+,R0
000079 9701      	SBIW R24,1
00007a f7e1      	BRNE __GLOBAL_INI_LOOP
00007b 01fb      	MOVW R30,R22
00007c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007e bfed      	OUT  SPL,R30
00007f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000080 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000081 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000082 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000083 940c 01a8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;#define LED PORTC.0
                 ;
                 ;int showTime(int hour,int minute,int second);
                 ;int checkAlarms();
                 ;int hour = 0;
                 ;int minute = 0;
                 ;int second = 0;
                 ;
                 ;int alarmHour = 0;
                 ;int alarmMinute = 0;
                 ;int alarmSecond = 0;
                 ;
                 ;int timerHour = 0;
                 ;int timerMinute = 0;
                 ;int timerSecond = 0;
                 ;
                 ;unsigned char modes[3][10] = {"clock","alarm", "timer"};
                 
                 	.DSEG
                 ;int modeInd = 0;
                 ;int alarmsHour[10];
                 ;int alarmsMin[10];
                 ;int alarmInd = 0;
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 001D {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000085 940e 04b0 	CALL SUBOPT_0x0
                 ; 0000 001E     // Reinitialize Timer1 value
                 ; 0000 001F     TCNT1H=0xCEFF >> 8;
000087 ecee      	LDI  R30,LOW(206)
000088 bded      	OUT  0x2D,R30
                 ; 0000 0020     TCNT1L=0xCEFF & 0xff;
000089 efef      	LDI  R30,LOW(255)
00008a bdec      	OUT  0x2C,R30
                 ; 0000 0021     second = second + 1;
00008b 01f4      	MOVW R30,R8
00008c 9631      	ADIW R30,1
00008d 014f      	MOVW R8,R30
                 ; 0000 0022     if(second >= 60){
00008e e3ec      	LDI  R30,LOW(60)
00008f e0f0      	LDI  R31,HIGH(60)
000090 168e      	CP   R8,R30
000091 069f      	CPC  R9,R31
000092 f054      	BRLT _0x4
                 ; 0000 0023         second = 0;
000093 2488      	CLR  R8
000094 2499      	CLR  R9
                 ; 0000 0024         minute += 1;
000095 940e 04be 	CALL SUBOPT_0x1
                 ; 0000 0025         if(minute >= 60){
000097 f02c      	BRLT _0x5
                 ; 0000 0026                 minute = 0;
000098 940e 04c6 	CALL SUBOPT_0x2
                 ; 0000 0027                 hour += 1;
                 ; 0000 0028                 if(hour >= 24)
00009a f014      	BRLT _0x6
                 ; 0000 0029                     hour = 0;
00009b 2444      	CLR  R4
00009c 2455      	CLR  R5
                 ; 0000 002A         }
                 _0x6:
                 ; 0000 002B     }
                 _0x5:
                 ; 0000 002C     if(modeInd == 0 )
                 _0x4:
00009d 940e 04d0 	CALL SUBOPT_0x3
00009f f411      	BRNE _0x7
                 ; 0000 002D         showTime(hour,minute,second);
0000a0 940e 04d6 	CALL SUBOPT_0x4
                 ; 0000 002E 
                 ; 0000 002F 
                 ; 0000 0030 
                 ; 0000 0031     if(modeInd == 2){
                 _0x7:
0000a2 940e 04dd 	CALL SUBOPT_0x5
0000a4 9712      	SBIW R26,2
0000a5 f009      	BREQ PC+2
0000a6 c042      	RJMP _0x8
                 ; 0000 0032         timerSecond = timerSecond + 1;
0000a7 91e0 0266 	LDS  R30,_timerSecond
0000a9 91f0 0267 	LDS  R31,_timerSecond+1
0000ab 9631      	ADIW R30,1
0000ac 93e0 0266 	STS  _timerSecond,R30
0000ae 93f0 0267 	STS  _timerSecond+1,R31
                 ; 0000 0033         if(timerSecond >= 60){
0000b0 91a0 0266 	LDS  R26,_timerSecond
0000b2 91b0 0267 	LDS  R27,_timerSecond+1
0000b4 97dc      	SBIW R26,60
0000b5 f114      	BRLT _0x9
                 ; 0000 0034             timerSecond = 0;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 93e0 0266 	STS  _timerSecond,R30
0000b9 93e0 0267 	STS  _timerSecond+1,R30
                 ; 0000 0035             timerMinute += 1;
0000bb 91e0 0264 	LDS  R30,_timerMinute
0000bd 91f0 0265 	LDS  R31,_timerMinute+1
0000bf 9631      	ADIW R30,1
0000c0 93e0 0264 	STS  _timerMinute,R30
0000c2 93f0 0265 	STS  _timerMinute+1,R31
                 ; 0000 0036             if(timerMinute >= 60){
0000c4 91a0 0264 	LDS  R26,_timerMinute
0000c6 91b0 0265 	LDS  R27,_timerMinute+1
0000c8 97dc      	SBIW R26,60
0000c9 f074      	BRLT _0xA
                 ; 0000 0037                     timerMinute = 0;
0000ca e0e0      	LDI  R30,LOW(0)
0000cb 93e0 0264 	STS  _timerMinute,R30
0000cd 93e0 0265 	STS  _timerMinute+1,R30
                 ; 0000 0038                     timerHour += 1;
0000cf 91e0 0262 	LDS  R30,_timerHour
0000d1 91f0 0263 	LDS  R31,_timerHour+1
0000d3 9631      	ADIW R30,1
0000d4 93e0 0262 	STS  _timerHour,R30
0000d6 93f0 0263 	STS  _timerHour+1,R31
                 ; 0000 0039             }
                 ; 0000 003A         }
                 _0xA:
                 ; 0000 003B     showTime(timerHour,timerMinute,timerSecond);
                 _0x9:
0000d8 91e0 0262 	LDS  R30,_timerHour
0000da 91f0 0263 	LDS  R31,_timerHour+1
0000dc 93fa      	ST   -Y,R31
0000dd 93ea      	ST   -Y,R30
0000de 91e0 0264 	LDS  R30,_timerMinute
0000e0 91f0 0265 	LDS  R31,_timerMinute+1
0000e2 93fa      	ST   -Y,R31
0000e3 93ea      	ST   -Y,R30
0000e4 91a0 0266 	LDS  R26,_timerSecond
0000e6 91b0 0267 	LDS  R27,_timerSecond+1
0000e8 d0f9      	RCALL _showTime
                 ; 0000 003C     }
                 ; 0000 003D     checkAlarms();
                 _0x8:
0000e9 d139      	RCALL _checkAlarms
                 ; 0000 003E }
0000ea c0af      	RJMP _0x2D
                 ; .FEND
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0042 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000eb 940e 04b0 	CALL SUBOPT_0x0
                 ; 0000 0043     if(modeInd == 1){ //alarm mode to timer mode (save alarm,start timer)
0000ed 940e 04dd 	CALL SUBOPT_0x5
0000ef 9711      	SBIW R26,1
0000f0 f549      	BRNE _0xB
                 ; 0000 0044         alarmsHour[alarmInd] = alarmHour;
0000f1 940e 04e2 	CALL SUBOPT_0x6
0000f3 e8a8      	LDI  R26,LOW(_alarmsHour)
0000f4 e0b2      	LDI  R27,HIGH(_alarmsHour)
0000f5 0fee      	LSL  R30
0000f6 1fff      	ROL  R31
0000f7 0fea      	ADD  R30,R26
0000f8 1ffb      	ADC  R31,R27
0000f9 82a0      	ST   Z,R10
0000fa 82b1      	STD  Z+1,R11
                 ; 0000 0045         alarmsMin[alarmInd] = alarmMinute;
0000fb 940e 04e2 	CALL SUBOPT_0x6
0000fd e9ac      	LDI  R26,LOW(_alarmsMin)
0000fe e0b2      	LDI  R27,HIGH(_alarmsMin)
0000ff 0fee      	LSL  R30
000100 1fff      	ROL  R31
000101 0fea      	ADD  R30,R26
000102 1ffb      	ADC  R31,R27
000103 82c0      	ST   Z,R12
000104 82d1      	STD  Z+1,R13
                 ; 0000 0046         alarmInd +=1;
000105 940e 04e2 	CALL SUBOPT_0x6
000107 9631      	ADIW R30,1
000108 93e0 02b0 	STS  _alarmInd,R30
00010a 93f0 02b1 	STS  _alarmInd+1,R31
                 ; 0000 0047 
                 ; 0000 0048          timerHour = 0;
00010c e0e0      	LDI  R30,LOW(0)
00010d 93e0 0262 	STS  _timerHour,R30
00010f 93e0 0263 	STS  _timerHour+1,R30
                 ; 0000 0049         timerMinute = 0;
000111 93e0 0264 	STS  _timerMinute,R30
000113 93e0 0265 	STS  _timerMinute+1,R30
                 ; 0000 004A         timerSecond = 0;
000115 93e0 0266 	STS  _timerSecond,R30
000117 93e0 0267 	STS  _timerSecond+1,R30
                 ; 0000 004B        }
                 ; 0000 004C 
                 ; 0000 004D     else if(modeInd == 0){  //clock mode to alarm mode(set alarm mode conditions)
000119 c009      	RJMP _0xC
                 _0xB:
00011a 940e 04d0 	CALL SUBOPT_0x3
00011c f431      	BRNE _0xD
                 ; 0000 004E         alarmHour = hour;
00011d 0152      	MOVW R10,R4
                 ; 0000 004F         alarmMinute = minute;
00011e 0163      	MOVW R12,R6
                 ; 0000 0050         alarmSecond = second;
                +
00011f 9280 0260+STS _alarmSecond + ( 0 ) , R8
000121 9290 0261+STS _alarmSecond + ( 0 ) + 1 , R9
                 	__PUTWMRN _alarmSecond,0,8,9
                 ; 0000 0051         }
                 ; 0000 0052 
                 ; 0000 0053     modeInd = (modeInd+1)%3;
                 _0xD:
                 _0xC:
000123 940e 04dd 	CALL SUBOPT_0x5
000125 9611      	ADIW R26,1
000126 e0e3      	LDI  R30,LOW(3)
000127 e0f0      	LDI  R31,HIGH(3)
000128 940e 0577 	CALL __MODW21
00012a 93e0 0286 	STS  _modeInd,R30
00012c 93f0 0287 	STS  _modeInd+1,R31
                 ; 0000 0054     showTime(hour,minute,second);
00012e 940e 04d6 	CALL SUBOPT_0x4
                 ; 0000 0055 
                 ; 0000 0056 }
000130 c069      	RJMP _0x2D
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 005A {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000131 940e 04b0 	CALL SUBOPT_0x0
                 ; 0000 005B     if(modeInd == 0){
000133 940e 04d0 	CALL SUBOPT_0x3
000135 f471      	BRNE _0xE
                 ; 0000 005C         minute += 1;
000136 940e 04be 	CALL SUBOPT_0x1
                 ; 0000 005D         if(minute >= 60){
000138 f02c      	BRLT _0xF
                 ; 0000 005E             minute = 0;
000139 940e 04c6 	CALL SUBOPT_0x2
                 ; 0000 005F             hour += 1;
                 ; 0000 0060             if(hour >= 24)
00013b f014      	BRLT _0x10
                 ; 0000 0061                 hour = 0;
00013c 2444      	CLR  R4
00013d 2455      	CLR  R5
                 ; 0000 0062         }
                 _0x10:
                 ; 0000 0063         showTime(hour,minute,second);
                 _0xF:
00013e 925a      	ST   -Y,R5
00013f 924a      	ST   -Y,R4
000140 927a      	ST   -Y,R7
000141 926a      	ST   -Y,R6
000142 01d4      	MOVW R26,R8
000143 c01a      	RJMP _0x2B
                 ; 0000 0064     }
                 ; 0000 0065 
                 ; 0000 0066     else if(modeInd==1){
                 _0xE:
000144 940e 04dd 	CALL SUBOPT_0x5
000146 9711      	SBIW R26,1
000147 f4b9      	BRNE _0x12
                 ; 0000 0067     alarmMinute += 1;
000148 01f6      	MOVW R30,R12
000149 9631      	ADIW R30,1
00014a 016f      	MOVW R12,R30
                 ; 0000 0068     if(alarmMinute >= 60){
00014b e3ec      	LDI  R30,LOW(60)
00014c e0f0      	LDI  R31,HIGH(60)
00014d 16ce      	CP   R12,R30
00014e 06df      	CPC  R13,R31
00014f f064      	BRLT _0x13
                 ; 0000 0069         alarmMinute = 0;
000150 24cc      	CLR  R12
000151 24dd      	CLR  R13
                 ; 0000 006A         alarmHour += 1;
000152 01f5      	MOVW R30,R10
000153 9631      	ADIW R30,1
000154 015f      	MOVW R10,R30
                 ; 0000 006B         if(alarmHour >= 24)
000155 e1e8      	LDI  R30,LOW(24)
000156 e0f0      	LDI  R31,HIGH(24)
000157 16ae      	CP   R10,R30
000158 06bf      	CPC  R11,R31
000159 f014      	BRLT _0x14
                 ; 0000 006C             alarmHour = 0;
00015a 24aa      	CLR  R10
00015b 24bb      	CLR  R11
                 ; 0000 006D     }
                 _0x14:
                 ; 0000 006E     showTime(alarmHour,alarmMinute,alarmSecond);
                 _0x13:
00015c 940e 04e7 	CALL SUBOPT_0x7
                 _0x2B:
00015e d083      	RCALL _showTime
                 ; 0000 006F     }
                 ; 0000 0070 }
                 _0x12:
00015f c03a      	RJMP _0x2D
                 ; .FEND
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0074 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000160 940e 04b0 	CALL SUBOPT_0x0
                 ; 0000 0075 // Place your code here
                 ; 0000 0076   if(modeInd==0){
000162 940e 04d0 	CALL SUBOPT_0x3
000164 f4d1      	BRNE _0x15
                 ; 0000 0077       minute-=1;
000165 01f3      	MOVW R30,R6
000166 9731      	SBIW R30,1
000167 013f      	MOVW R6,R30
                 ; 0000 0078       if(minute<0){
000168 2400      	CLR  R0
000169 1460      	CP   R6,R0
00016a 0470      	CPC  R7,R0
00016b f46c      	BRGE _0x16
                 ; 0000 0079           minute = 59;
00016c e3eb      	LDI  R30,LOW(59)
00016d e0f0      	LDI  R31,HIGH(59)
00016e 013f      	MOVW R6,R30
                 ; 0000 007A           hour-=1;
00016f 01f2      	MOVW R30,R4
000170 9731      	SBIW R30,1
000171 012f      	MOVW R4,R30
                 ; 0000 007B           if(hour<0)
000172 2400      	CLR  R0
000173 1440      	CP   R4,R0
000174 0450      	CPC  R5,R0
000175 f41c      	BRGE _0x17
                 ; 0000 007C             hour = 23;
000176 e1e7      	LDI  R30,LOW(23)
000177 e0f0      	LDI  R31,HIGH(23)
000178 012f      	MOVW R4,R30
                 ; 0000 007D           }
                 _0x17:
                 ; 0000 007E       showTime(hour,minute,second);
                 _0x16:
000179 925a      	ST   -Y,R5
00017a 924a      	ST   -Y,R4
00017b 927a      	ST   -Y,R7
00017c 926a      	ST   -Y,R6
00017d 01d4      	MOVW R26,R8
00017e c01a      	RJMP _0x2C
                 ; 0000 007F   }
                 ; 0000 0080   else if(modeInd==1){
                 _0x15:
00017f 940e 04dd 	CALL SUBOPT_0x5
000181 9711      	SBIW R26,1
000182 f4b9      	BRNE _0x19
                 ; 0000 0081   {
                 ; 0000 0082       alarmMinute-=1;
000183 01f6      	MOVW R30,R12
000184 9731      	SBIW R30,1
000185 016f      	MOVW R12,R30
                 ; 0000 0083       if(alarmMinute<0){
000186 2400      	CLR  R0
000187 14c0      	CP   R12,R0
000188 04d0      	CPC  R13,R0
000189 f46c      	BRGE _0x1A
                 ; 0000 0084           alarmMinute = 59;
00018a e3eb      	LDI  R30,LOW(59)
00018b e0f0      	LDI  R31,HIGH(59)
00018c 016f      	MOVW R12,R30
                 ; 0000 0085           alarmHour-=1;
00018d 01f5      	MOVW R30,R10
00018e 9731      	SBIW R30,1
00018f 015f      	MOVW R10,R30
                 ; 0000 0086           if(alarmHour<0)
000190 2400      	CLR  R0
000191 14a0      	CP   R10,R0
000192 04b0      	CPC  R11,R0
000193 f41c      	BRGE _0x1B
                 ; 0000 0087             alarmHour = 23;
000194 e1e7      	LDI  R30,LOW(23)
000195 e0f0      	LDI  R31,HIGH(23)
000196 015f      	MOVW R10,R30
                 ; 0000 0088           }
                 _0x1B:
                 ; 0000 0089       showTime(alarmHour,alarmMinute,alarmSecond);
                 _0x1A:
000197 940e 04e7 	CALL SUBOPT_0x7
                 _0x2C:
000199 d048      	RCALL _showTime
                 ; 0000 008A   }
                 ; 0000 008B   }
                 ; 0000 008C }
                 _0x19:
                 _0x2D:
00019a 91e9      	LD   R30,Y+
00019b bfef      	OUT  SREG,R30
00019c 91f9      	LD   R31,Y+
00019d 91e9      	LD   R30,Y+
00019e 91b9      	LD   R27,Y+
00019f 91a9      	LD   R26,Y+
0001a0 9199      	LD   R25,Y+
0001a1 9189      	LD   R24,Y+
0001a2 9179      	LD   R23,Y+
0001a3 9169      	LD   R22,Y+
0001a4 90f9      	LD   R15,Y+
0001a5 9019      	LD   R1,Y+
0001a6 9009      	LD   R0,Y+
0001a7 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0090 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0091 DDRA  = 0x00;
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 bbea      	OUT  0x1A,R30
                 ; 0000 0092 PORTA = 0x00;
0001aa bbeb      	OUT  0x1B,R30
                 ; 0000 0093 DDRB  = 0x00;
0001ab bbe7      	OUT  0x17,R30
                 ; 0000 0094 PORTB = 0x00;
0001ac bbe8      	OUT  0x18,R30
                 ; 0000 0095 
                 ; 0000 0096 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0097 DDRC  = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
0001ad e0e1      	LDI  R30,LOW(1)
0001ae bbe4      	OUT  0x14,R30
                 ; 0000 0098 PORTC = 0x00;
0001af e0e0      	LDI  R30,LOW(0)
0001b0 bbe5      	OUT  0x15,R30
                 ; 0000 0099 
                 ; 0000 009A DDRD  = 0x00;
0001b1 bbe1      	OUT  0x11,R30
                 ; 0000 009B PORTD = 0x00;
0001b2 bbe2      	OUT  0x12,R30
                 ; 0000 009C 
                 ; 0000 009D //Time/counter 0
                 ; 0000 009E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0001b3 bfe3      	OUT  0x33,R30
                 ; 0000 009F TCNT0=0x00;
0001b4 bfe2      	OUT  0x32,R30
                 ; 0000 00A0 OCR0=0x00;
0001b5 bfec      	OUT  0x3C,R30
                 ; 0000 00A1 
                 ; 0000 00A2 
                 ; 0000 00A3 // Timer/Counter 1 initialization
                 ; 0000 00A4 // Clock source: System Clock
                 ; 0000 00A5 // Clock value: 15.625 kHz
                 ; 0000 00A6 // Mode: Normal top=0xFFFF
                 ; 0000 00A7 // OC1A output: Disconnected
                 ; 0000 00A8 // OC1B output: Disconnected
                 ; 0000 00A9 // Noise Canceler: Off
                 ; 0000 00AA // Input Capture on Falling Edge
                 ; 0000 00AB // Timer Period: 1 s
                 ; 0000 00AC // Timer1 Overflow Interrupt: On
                 ; 0000 00AD // Input Capture Interrupt: Off
                 ; 0000 00AE // Compare A Match Interrupt: Off
                 ; 0000 00AF // Compare B Match Interrupt: Off
                 ; 0000 00B0 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0001b6 bdef      	OUT  0x2F,R30
                 ; 0000 00B1 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
0001b7 e0e3      	LDI  R30,LOW(3)
0001b8 bdee      	OUT  0x2E,R30
                 ; 0000 00B2 TCNT1H=0xCE;
0001b9 ecee      	LDI  R30,LOW(206)
0001ba bded      	OUT  0x2D,R30
                 ; 0000 00B3 TCNT1L=0xFF;
0001bb efef      	LDI  R30,LOW(255)
0001bc bdec      	OUT  0x2C,R30
                 ; 0000 00B4 ICR1H=0x00;
0001bd e0e0      	LDI  R30,LOW(0)
0001be bde7      	OUT  0x27,R30
                 ; 0000 00B5 ICR1L=0x00;
0001bf bde6      	OUT  0x26,R30
                 ; 0000 00B6 OCR1AH=0x00;
0001c0 bdeb      	OUT  0x2B,R30
                 ; 0000 00B7 OCR1AL=0x00;
0001c1 bdea      	OUT  0x2A,R30
                 ; 0000 00B8 OCR1BH=0x00;
0001c2 bde9      	OUT  0x29,R30
                 ; 0000 00B9 OCR1BL=0x00;
0001c3 bde8      	OUT  0x28,R30
                 ; 0000 00BA 
                 ; 0000 00BB // Timer/Counter 2 initialization
                 ; 0000 00BC ASSR=0<<AS2;
0001c4 bde2      	OUT  0x22,R30
                 ; 0000 00BD TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001c5 bde5      	OUT  0x25,R30
                 ; 0000 00BE TCNT2=0x00;
0001c6 bde4      	OUT  0x24,R30
                 ; 0000 00BF OCR2=0x00;
0001c7 bde3      	OUT  0x23,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C2 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0001c8 e0e5      	LDI  R30,LOW(5)
0001c9 bfe9      	OUT  0x39,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // External Interrupt(s) initialization
                 ; 0000 00C5 // INT0: On
                 ; 0000 00C6 // INT0 Mode: Rising Edge
                 ; 0000 00C7 // INT1: On
                 ; 0000 00C8 // INT1 Mode: Rising Edge
                 ; 0000 00C9 // INT2: On
                 ; 0000 00CA // INT2 Mode: Rising Edge
                 ; 0000 00CB GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
0001ca b7eb      	IN   R30,0x3B
0001cb 6ee0      	ORI  R30,LOW(0xE0)
0001cc bfeb      	OUT  0x3B,R30
                 ; 0000 00CC MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
0001cd e0ef      	LDI  R30,LOW(15)
0001ce bfe5      	OUT  0x35,R30
                 ; 0000 00CD MCUCSR=(1<<ISC2);
0001cf e4e0      	LDI  R30,LOW(64)
0001d0 bfe4      	OUT  0x34,R30
                 ; 0000 00CE GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
0001d1 eee0      	LDI  R30,LOW(224)
0001d2 bfea      	OUT  0x3A,R30
                 ; 0000 00CF 
                 ; 0000 00D0 // USART initialization
                 ; 0000 00D1 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 b9ea      	OUT  0xA,R30
                 ; 0000 00D2 
                 ; 0000 00D3 // Analog Comparator initialization
                 ; 0000 00D4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001d5 e8e0      	LDI  R30,LOW(128)
0001d6 b9e8      	OUT  0x8,R30
                 ; 0000 00D5 SFIOR=(0<<ACME);
0001d7 e0e0      	LDI  R30,LOW(0)
0001d8 bfe0      	OUT  0x30,R30
                 ; 0000 00D6 
                 ; 0000 00D7 // ADC initialization
                 ; 0000 00D8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0001d9 b9e6      	OUT  0x6,R30
                 ; 0000 00D9 
                 ; 0000 00DA // SPI initialization
                 ; 0000 00DB SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001da b9ed      	OUT  0xD,R30
                 ; 0000 00DC 
                 ; 0000 00DD // TWI initialization
                 ; 0000 00DE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001db bfe6      	OUT  0x36,R30
                 ; 0000 00DF 
                 ; 0000 00E0 // Alphanumeric LCD initialization
                 ; 0000 00E1 // Connections are specified in the
                 ; 0000 00E2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00E3 // RS - PORTA Bit 0
                 ; 0000 00E4 // RD - PORTA Bit 1
                 ; 0000 00E5 // EN - PORTA Bit 2
                 ; 0000 00E6 // D4 - PORTA Bit 4
                 ; 0000 00E7 // D5 - PORTA Bit 5
                 ; 0000 00E8 // D6 - PORTA Bit 6
                 ; 0000 00E9 // D7 - PORTA Bit 7
                 ; 0000 00EA // Characters/line: 8
                 ; 0000 00EB lcd_init(8);
0001dc e0a8      	LDI  R26,LOW(8)
0001dd 940e 0469 	CALL _lcd_init
                 ; 0000 00EC 
                 ; 0000 00ED // Global enable interrupts
                 ; 0000 00EE #asm("sei")
0001df 9478      	sei
                 ; 0000 00EF 
                 ; 0000 00F0 while (1)
                 _0x1C:
                 ; 0000 00F1       {
                 ; 0000 00F2       // Place your code here
                 ; 0000 00F3 
                 ; 0000 00F4       }
0001e0 cfff      	RJMP _0x1C
                 ; 0000 00F5 }
                 _0x1F:
0001e1 cfff      	RJMP _0x1F
                 ; .FEND
                 ;
                 ; int showTime(int hour,int minute,int second){
                 ; 0000 00F7 int showTime(int hour,int minute,int second){
                 _showTime:
                 ; .FSTART _showTime
                 ; 0000 00F8     unsigned char time[15];
                 ; 0000 00F9     lcd_gotoxy(0,0);
0001e2 93ba      	ST   -Y,R27
0001e3 93aa      	ST   -Y,R26
0001e4 972f      	SBIW R28,15
                 ;	hour -> Y+19
                 ;	minute -> Y+17
                 ;	second -> Y+15
                 ;	time -> Y+0
0001e5 e0e0      	LDI  R30,LOW(0)
0001e6 93ea      	ST   -Y,R30
0001e7 e0a0      	LDI  R26,LOW(0)
0001e8 940e 0419 	CALL _lcd_gotoxy
                 ; 0000 00FA     lcd_puts(modes[modeInd]);
0001ea 940e 04dd 	CALL SUBOPT_0x5
0001ec e0ea      	LDI  R30,LOW(10)
0001ed 940e 0559 	CALL __MULB1W2U
0001ef 59e8      	SUBI R30,LOW(-_modes)
0001f0 4ffd      	SBCI R31,HIGH(-_modes)
0001f1 01df      	MOVW R26,R30
0001f2 940e 0458 	CALL _lcd_puts
                 ; 0000 00FB     lcd_gotoxy(0,1);
0001f4 e0e0      	LDI  R30,LOW(0)
0001f5 93ea      	ST   -Y,R30
0001f6 e0a1      	LDI  R26,LOW(1)
0001f7 940e 0419 	CALL _lcd_gotoxy
                 ; 0000 00FC     sprintf(time,"%d%d:%d%d:%d%d",hour/10,hour%10,minute/10,minute%10,second/10,second%10);
0001f9 01fe      	MOVW R30,R28
0001fa 93fa      	ST   -Y,R31
0001fb 93ea      	ST   -Y,R30
                +
0001fc e8ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001fd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001fe 93fa      	ST   -Y,R31
0001ff 93ea      	ST   -Y,R30
000200 89af      	LDD  R26,Y+23
000201 8db8      	LDD  R27,Y+23+1
000202 940e 04f0 	CALL SUBOPT_0x8
000204 8dab      	LDD  R26,Y+27
000205 8dbc      	LDD  R27,Y+27+1
000206 940e 04f9 	CALL SUBOPT_0x9
000208 8dad      	LDD  R26,Y+29
000209 8dbe      	LDD  R27,Y+29+1
00020a 940e 04f0 	CALL SUBOPT_0x8
00020c a1a9      	LDD  R26,Y+33
00020d a1ba      	LDD  R27,Y+33+1
00020e 940e 04f9 	CALL SUBOPT_0x9
000210 a1ab      	LDD  R26,Y+35
000211 a1bc      	LDD  R27,Y+35+1
000212 940e 04f0 	CALL SUBOPT_0x8
000214 a1af      	LDD  R26,Y+39
000215 a5b8      	LDD  R27,Y+39+1
000216 940e 04f9 	CALL SUBOPT_0x9
000218 e188      	LDI  R24,24
000219 940e 03c5 	CALL _sprintf
00021b 966c      	ADIW R28,28
                 ; 0000 00FD     lcd_puts(time);
00021c 01de      	MOVW R26,R28
00021d 940e 0458 	CALL _lcd_puts
                 ; 0000 00FE     return 0;
00021f e0e0      	LDI  R30,LOW(0)
000220 e0f0      	LDI  R31,HIGH(0)
000221 9665      	ADIW R28,21
000222 9508      	RET
                 ; 0000 00FF }
                 ; .FEND
                 ;
                 ;
                 ;int checkAlarms(){
                 ; 0000 0102 int checkAlarms(){
                 _checkAlarms:
                 ; .FSTART _checkAlarms
                 ; 0000 0103 int i = 0;
                 ; 0000 0104 int flag = 0;
                 ; 0000 0105 for(i=0;i<alarmInd;i++){
000223 940e 05a2 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	flag -> R18,R19
                +
000225 e000     +LDI R16 , LOW ( 0 )
000226 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000227 e020     +LDI R18 , LOW ( 0 )
000228 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000229 e000     +LDI R16 , LOW ( 0 )
00022a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x21:
00022b 940e 04e2 	CALL SUBOPT_0x6
00022d 170e      	CP   R16,R30
00022e 071f      	CPC  R17,R31
00022f f4bc      	BRGE _0x22
                 ; 0000 0106     if(alarmsHour[i]==hour && minute==alarmsMin[i]) {
000230 01f8      	MOVW R30,R16
000231 e8a8      	LDI  R26,LOW(_alarmsHour)
000232 e0b2      	LDI  R27,HIGH(_alarmsHour)
000233 940e 0502 	CALL SUBOPT_0xA
000235 164e      	CP   R4,R30
000236 065f      	CPC  R5,R31
000237 f441      	BRNE _0x24
000238 01f8      	MOVW R30,R16
000239 e9ac      	LDI  R26,LOW(_alarmsMin)
00023a e0b2      	LDI  R27,HIGH(_alarmsMin)
00023b 940e 0502 	CALL SUBOPT_0xA
00023d 15e6      	CP   R30,R6
00023e 05f7      	CPC  R31,R7
00023f f009      	BREQ _0x25
                 _0x24:
000240 c003      	RJMP _0x23
                 _0x25:
                 ; 0000 0107     LED=1;
000241 9aa8      	SBI  0x15,0
                 ; 0000 0108     flag = 1;
                +
000242 e021     +LDI R18 , LOW ( 1 )
000243 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0109     }
                 ; 0000 010A }
                 _0x23:
                +
000244 5f0f     +SUBI R16 , LOW ( - 1 )
000245 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000246 cfe4      	RJMP _0x21
                 _0x22:
                 ; 0000 010B if(flag==0)
000247 2e02      	MOV  R0,R18
000248 2a03      	OR   R0,R19
000249 f409      	BRNE _0x28
                 ; 0000 010C     LED = 0;
00024a 98a8      	CBI  0x15,0
                 ; 0000 010D return 0;
                 _0x28:
00024b e0e0      	LDI  R30,LOW(0)
00024c e0f0      	LDI  R31,HIGH(0)
00024d 940e 05a9 	CALL __LOADLOCR4
00024f 9624      	ADIW R28,4
000250 9508      	RET
                 ; 0000 010E }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000251 93ba      	ST   -Y,R27
000252 93aa      	ST   -Y,R26
000253 931a      	ST   -Y,R17
000254 930a      	ST   -Y,R16
000255 81aa      	LDD  R26,Y+2
000256 81bb      	LDD  R27,Y+2+1
000257 9612      	ADIW R26,2
000258 940e 0593 	CALL __GETW1P
00025a 9730      	SBIW R30,0
00025b f159      	BREQ _0x2000010
00025c 81aa      	LDD  R26,Y+2
00025d 81bb      	LDD  R27,Y+2+1
00025e 9614      	ADIW R26,4
00025f 940e 0593 	CALL __GETW1P
000261 018f      	MOVW R16,R30
000262 9730      	SBIW R30,0
000263 f061      	BREQ _0x2000012
                +
000264 3002     +CPI R16 , LOW ( 2 )
000265 e0e0     +LDI R30 , HIGH ( 2 )
000266 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000267 f098      	BRLO _0x2000013
000268 01f8      	MOVW R30,R16
000269 9731      	SBIW R30,1
00026a 018f      	MOVW R16,R30
                +
00026b 81aa     +LDD R26 , Y + 2
00026c 81bb     +LDD R27 , Y + 2 + 1
00026d 9614     +ADIW R26 , 4
00026e 93ed     +ST X + , R30
00026f 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000270 81aa      	LDD  R26,Y+2
000271 81bb      	LDD  R27,Y+2+1
000272 9612      	ADIW R26,2
000273 91ed      	LD   R30,X+
000274 91fd      	LD   R31,X+
000275 9631      	ADIW R30,1
000276 93fe      	ST   -X,R31
000277 93ee      	ST   -X,R30
000278 9731      	SBIW R30,1
000279 81ac      	LDD  R26,Y+4
00027a 83a0      	STD  Z+0,R26
                 _0x2000013:
00027b 81aa      	LDD  R26,Y+2
00027c 81bb      	LDD  R27,Y+2+1
00027d 940e 0593 	CALL __GETW1P
00027f 23ff      	TST  R31
000280 f02a      	BRMI _0x2000014
000281 91ed      	LD   R30,X+
000282 91fd      	LD   R31,X+
000283 9631      	ADIW R30,1
000284 93fe      	ST   -X,R31
000285 93ee      	ST   -X,R30
                 _0x2000014:
000286 c006      	RJMP _0x2000015
                 _0x2000010:
000287 81aa      	LDD  R26,Y+2
000288 81bb      	LDD  R27,Y+2+1
000289 efef      	LDI  R30,LOW(65535)
00028a efff      	LDI  R31,HIGH(65535)
00028b 93ed      	ST   X+,R30
00028c 93fc      	ST   X,R31
                 _0x2000015:
00028d 8119      	LDD  R17,Y+1
00028e 8108      	LDD  R16,Y+0
00028f 9625      	ADIW R28,5
000290 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000291 93ba      	ST   -Y,R27
000292 93aa      	ST   -Y,R26
000293 9726      	SBIW R28,6
000294 940e 05a0 	CALL __SAVELOCR6
000296 e010      	LDI  R17,0
000297 85ac      	LDD  R26,Y+12
000298 85bd      	LDD  R27,Y+12+1
000299 e0e0      	LDI  R30,LOW(0)
00029a e0f0      	LDI  R31,HIGH(0)
00029b 93ed      	ST   X+,R30
00029c 93fc      	ST   X,R31
                 _0x2000016:
00029d 89ea      	LDD  R30,Y+18
00029e 89fb      	LDD  R31,Y+18+1
00029f 9631      	ADIW R30,1
0002a0 8bea      	STD  Y+18,R30
0002a1 8bfb      	STD  Y+18+1,R31
0002a2 9731      	SBIW R30,1
0002a3 91e4      	LPM  R30,Z
0002a4 2f2e      	MOV  R18,R30
0002a5 30e0      	CPI  R30,0
0002a6 f409      	BRNE PC+2
0002a7 c115      	RJMP _0x2000018
0002a8 2fe1      	MOV  R30,R17
0002a9 30e0      	CPI  R30,0
0002aa f439      	BRNE _0x200001C
0002ab 3225      	CPI  R18,37
0002ac f411      	BRNE _0x200001D
0002ad e011      	LDI  R17,LOW(1)
0002ae c002      	RJMP _0x200001E
                 _0x200001D:
0002af 940e 0509 	CALL SUBOPT_0xB
                 _0x200001E:
0002b1 c10a      	RJMP _0x200001B
                 _0x200001C:
0002b2 30e1      	CPI  R30,LOW(0x1)
0002b3 f4a9      	BRNE _0x200001F
0002b4 3225      	CPI  R18,37
0002b5 f419      	BRNE _0x2000020
0002b6 940e 0509 	CALL SUBOPT_0xB
0002b8 c102      	RJMP _0x20000CC
                 _0x2000020:
0002b9 e012      	LDI  R17,LOW(2)
0002ba e040      	LDI  R20,LOW(0)
0002bb e000      	LDI  R16,LOW(0)
0002bc 322d      	CPI  R18,45
0002bd f411      	BRNE _0x2000021
0002be e001      	LDI  R16,LOW(1)
0002bf c0fc      	RJMP _0x200001B
                 _0x2000021:
0002c0 322b      	CPI  R18,43
0002c1 f411      	BRNE _0x2000022
0002c2 e24b      	LDI  R20,LOW(43)
0002c3 c0f8      	RJMP _0x200001B
                 _0x2000022:
0002c4 3220      	CPI  R18,32
0002c5 f411      	BRNE _0x2000023
0002c6 e240      	LDI  R20,LOW(32)
0002c7 c0f4      	RJMP _0x200001B
                 _0x2000023:
0002c8 c002      	RJMP _0x2000024
                 _0x200001F:
0002c9 30e2      	CPI  R30,LOW(0x2)
0002ca f439      	BRNE _0x2000025
                 _0x2000024:
0002cb e050      	LDI  R21,LOW(0)
0002cc e013      	LDI  R17,LOW(3)
0002cd 3320      	CPI  R18,48
0002ce f411      	BRNE _0x2000026
0002cf 6800      	ORI  R16,LOW(128)
0002d0 c0eb      	RJMP _0x200001B
                 _0x2000026:
0002d1 c003      	RJMP _0x2000027
                 _0x2000025:
0002d2 30e3      	CPI  R30,LOW(0x3)
0002d3 f009      	BREQ PC+2
0002d4 c0e7      	RJMP _0x200001B
                 _0x2000027:
0002d5 3320      	CPI  R18,48
0002d6 f010      	BRLO _0x200002A
0002d7 332a      	CPI  R18,58
0002d8 f008      	BRLO _0x200002B
                 _0x200002A:
0002d9 c007      	RJMP _0x2000029
                 _0x200002B:
0002da e0aa      	LDI  R26,LOW(10)
0002db 9f5a      	MUL  R21,R26
0002dc 2d50      	MOV  R21,R0
0002dd 2fe2      	MOV  R30,R18
0002de 53e0      	SUBI R30,LOW(48)
0002df 0f5e      	ADD  R21,R30
0002e0 c0db      	RJMP _0x200001B
                 _0x2000029:
0002e1 2fe2      	MOV  R30,R18
0002e2 36e3      	CPI  R30,LOW(0x63)
0002e3 f449      	BRNE _0x200002F
0002e4 940e 0510 	CALL SUBOPT_0xC
0002e6 89e8      	LDD  R30,Y+16
0002e7 89f9      	LDD  R31,Y+16+1
0002e8 81a4      	LDD  R26,Z+4
0002e9 93aa      	ST   -Y,R26
0002ea 940e 0516 	CALL SUBOPT_0xD
0002ec c0ce      	RJMP _0x2000030
                 _0x200002F:
0002ed 37e3      	CPI  R30,LOW(0x73)
0002ee f441      	BRNE _0x2000032
0002ef 940e 0510 	CALL SUBOPT_0xC
0002f1 940e 051c 	CALL SUBOPT_0xE
0002f3 940e 0497 	CALL _strlen
0002f5 2f1e      	MOV  R17,R30
0002f6 c00a      	RJMP _0x2000033
                 _0x2000032:
0002f7 37e0      	CPI  R30,LOW(0x70)
0002f8 f461      	BRNE _0x2000035
0002f9 940e 0510 	CALL SUBOPT_0xC
0002fb 940e 051c 	CALL SUBOPT_0xE
0002fd 940e 04a3 	CALL _strlenf
0002ff 2f1e      	MOV  R17,R30
000300 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000301 6002      	ORI  R16,LOW(2)
000302 770f      	ANDI R16,LOW(127)
000303 e030      	LDI  R19,LOW(0)
000304 c034      	RJMP _0x2000036
                 _0x2000035:
000305 36e4      	CPI  R30,LOW(0x64)
000306 f011      	BREQ _0x2000039
000307 36e9      	CPI  R30,LOW(0x69)
000308 f411      	BRNE _0x200003A
                 _0x2000039:
000309 6004      	ORI  R16,LOW(4)
00030a c002      	RJMP _0x200003B
                 _0x200003A:
00030b 37e5      	CPI  R30,LOW(0x75)
00030c f431      	BRNE _0x200003C
                 _0x200003B:
00030d e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00030e e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00030f 83ee      	STD  Y+6,R30
000310 83ff      	STD  Y+6+1,R31
000311 e015      	LDI  R17,LOW(5)
000312 c00c      	RJMP _0x200003D
                 _0x200003C:
000313 35e8      	CPI  R30,LOW(0x58)
000314 f411      	BRNE _0x200003F
000315 6008      	ORI  R16,LOW(8)
000316 c003      	RJMP _0x2000040
                 _0x200003F:
000317 37e8      	CPI  R30,LOW(0x78)
000318 f009      	BREQ PC+2
000319 c0a1      	RJMP _0x2000071
                 _0x2000040:
00031a e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00031b e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00031c 83ee      	STD  Y+6,R30
00031d 83ff      	STD  Y+6+1,R31
00031e e014      	LDI  R17,LOW(4)
                 _0x200003D:
00031f ff02      	SBRS R16,2
000320 c014      	RJMP _0x2000042
000321 940e 0510 	CALL SUBOPT_0xC
000323 940e 0526 	CALL SUBOPT_0xF
000325 85ab      	LDD  R26,Y+11
000326 23aa      	TST  R26
000327 f43a      	BRPL _0x2000043
000328 85ea      	LDD  R30,Y+10
000329 85fb      	LDD  R31,Y+10+1
00032a 940e 0550 	CALL __ANEGW1
00032c 87ea      	STD  Y+10,R30
00032d 87fb      	STD  Y+10+1,R31
00032e e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00032f 3040      	CPI  R20,0
000330 f011      	BREQ _0x2000044
000331 5f1f      	SUBI R17,-LOW(1)
000332 c001      	RJMP _0x2000045
                 _0x2000044:
000333 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000334 c004      	RJMP _0x2000046
                 _0x2000042:
000335 940e 0510 	CALL SUBOPT_0xC
000337 940e 0526 	CALL SUBOPT_0xF
                 _0x2000046:
                 _0x2000036:
000339 fd00      	SBRC R16,0
00033a c011      	RJMP _0x2000047
                 _0x2000048:
00033b 1715      	CP   R17,R21
00033c f478      	BRSH _0x200004A
00033d ff07      	SBRS R16,7
00033e c008      	RJMP _0x200004B
00033f ff02      	SBRS R16,2
000340 c004      	RJMP _0x200004C
000341 7f0b      	ANDI R16,LOW(251)
000342 2f24      	MOV  R18,R20
000343 5011      	SUBI R17,LOW(1)
000344 c001      	RJMP _0x200004D
                 _0x200004C:
000345 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000346 c001      	RJMP _0x200004E
                 _0x200004B:
000347 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000348 940e 0509 	CALL SUBOPT_0xB
00034a 5051      	SUBI R21,LOW(1)
00034b cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00034c 2f31      	MOV  R19,R17
00034d ff01      	SBRS R16,1
00034e c017      	RJMP _0x200004F
                 _0x2000050:
00034f 3030      	CPI  R19,0
000350 f0a1      	BREQ _0x2000052
000351 ff03      	SBRS R16,3
000352 c006      	RJMP _0x2000053
000353 81ee      	LDD  R30,Y+6
000354 81ff      	LDD  R31,Y+6+1
000355 9125      	LPM  R18,Z+
000356 83ee      	STD  Y+6,R30
000357 83ff      	STD  Y+6+1,R31
000358 c005      	RJMP _0x2000054
                 _0x2000053:
000359 81ae      	LDD  R26,Y+6
00035a 81bf      	LDD  R27,Y+6+1
00035b 912d      	LD   R18,X+
00035c 83ae      	STD  Y+6,R26
00035d 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00035e 940e 0509 	CALL SUBOPT_0xB
000360 3050      	CPI  R21,0
000361 f009      	BREQ _0x2000055
000362 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000363 5031      	SUBI R19,LOW(1)
000364 cfea      	RJMP _0x2000050
                 _0x2000052:
000365 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000366 e320      	LDI  R18,LOW(48)
000367 81ee      	LDD  R30,Y+6
000368 81ff      	LDD  R31,Y+6+1
000369 940e 0597 	CALL __GETW1PF
00036b 87e8      	STD  Y+8,R30
00036c 87f9      	STD  Y+8+1,R31
00036d 81ee      	LDD  R30,Y+6
00036e 81ff      	LDD  R31,Y+6+1
00036f 9632      	ADIW R30,2
000370 83ee      	STD  Y+6,R30
000371 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000372 85e8      	LDD  R30,Y+8
000373 85f9      	LDD  R31,Y+8+1
000374 85aa      	LDD  R26,Y+10
000375 85bb      	LDD  R27,Y+10+1
000376 17ae      	CP   R26,R30
000377 07bf      	CPC  R27,R31
000378 f050      	BRLO _0x200005C
000379 5f2f      	SUBI R18,-LOW(1)
00037a 85a8      	LDD  R26,Y+8
00037b 85b9      	LDD  R27,Y+8+1
00037c 85ea      	LDD  R30,Y+10
00037d 85fb      	LDD  R31,Y+10+1
00037e 1bea      	SUB  R30,R26
00037f 0bfb      	SBC  R31,R27
000380 87ea      	STD  Y+10,R30
000381 87fb      	STD  Y+10+1,R31
000382 cfef      	RJMP _0x200005A
                 _0x200005C:
000383 332a      	CPI  R18,58
000384 f028      	BRLO _0x200005D
000385 ff03      	SBRS R16,3
000386 c002      	RJMP _0x200005E
000387 5f29      	SUBI R18,-LOW(7)
000388 c001      	RJMP _0x200005F
                 _0x200005E:
000389 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00038a fd04      	SBRC R16,4
00038b c01a      	RJMP _0x2000061
00038c 3321      	CPI  R18,49
00038d f420      	BRSH _0x2000063
00038e 85a8      	LDD  R26,Y+8
00038f 85b9      	LDD  R27,Y+8+1
000390 9711      	SBIW R26,1
000391 f409      	BRNE _0x2000062
                 _0x2000063:
000392 c009      	RJMP _0x20000CD
                 _0x2000062:
000393 1753      	CP   R21,R19
000394 f010      	BRLO _0x2000067
000395 ff00      	SBRS R16,0
000396 c001      	RJMP _0x2000068
                 _0x2000067:
000397 c013      	RJMP _0x2000066
                 _0x2000068:
000398 e220      	LDI  R18,LOW(32)
000399 ff07      	SBRS R16,7
00039a c00b      	RJMP _0x2000069
00039b e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00039c 6100      	ORI  R16,LOW(16)
00039d ff02      	SBRS R16,2
00039e c007      	RJMP _0x200006A
00039f 7f0b      	ANDI R16,LOW(251)
0003a0 934a      	ST   -Y,R20
0003a1 940e 0516 	CALL SUBOPT_0xD
0003a3 3050      	CPI  R21,0
0003a4 f009      	BREQ _0x200006B
0003a5 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0003a6 940e 0509 	CALL SUBOPT_0xB
0003a8 3050      	CPI  R21,0
0003a9 f009      	BREQ _0x200006C
0003aa 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0003ab 5031      	SUBI R19,LOW(1)
0003ac 85a8      	LDD  R26,Y+8
0003ad 85b9      	LDD  R27,Y+8+1
0003ae 9712      	SBIW R26,2
0003af f008      	BRLO _0x2000059
0003b0 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0003b1 ff00      	SBRS R16,0
0003b2 c008      	RJMP _0x200006D
                 _0x200006E:
0003b3 3050      	CPI  R21,0
0003b4 f031      	BREQ _0x2000070
0003b5 5051      	SUBI R21,LOW(1)
0003b6 e2e0      	LDI  R30,LOW(32)
0003b7 93ea      	ST   -Y,R30
0003b8 940e 0516 	CALL SUBOPT_0xD
0003ba cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0003bb e010      	LDI  R17,LOW(0)
                 _0x200001B:
0003bc cee0      	RJMP _0x2000016
                 _0x2000018:
0003bd 85ac      	LDD  R26,Y+12
0003be 85bd      	LDD  R27,Y+12+1
0003bf 940e 0593 	CALL __GETW1P
0003c1 940e 05a7 	CALL __LOADLOCR6
0003c3 9664      	ADIW R28,20
0003c4 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003c5 92ff      	PUSH R15
0003c6 2ef8      	MOV  R15,R24
0003c7 9726      	SBIW R28,6
0003c8 940e 05a2 	CALL __SAVELOCR4
0003ca 940e 052e 	CALL SUBOPT_0x10
0003cc 9730      	SBIW R30,0
0003cd f419      	BRNE _0x2000072
0003ce efef      	LDI  R30,LOW(65535)
0003cf efff      	LDI  R31,HIGH(65535)
0003d0 c023      	RJMP _0x2080002
                 _0x2000072:
0003d1 01de      	MOVW R26,R28
0003d2 9616      	ADIW R26,6
0003d3 940e 054c 	CALL __ADDW2R15
0003d5 018d      	MOVW R16,R26
0003d6 940e 052e 	CALL SUBOPT_0x10
0003d8 83ee      	STD  Y+6,R30
0003d9 83ff      	STD  Y+6+1,R31
0003da e0e0      	LDI  R30,LOW(0)
0003db 87e8      	STD  Y+8,R30
0003dc 87e9      	STD  Y+8+1,R30
0003dd 01de      	MOVW R26,R28
0003de 961a      	ADIW R26,10
0003df 940e 054c 	CALL __ADDW2R15
0003e1 940e 0593 	CALL __GETW1P
0003e3 93fa      	ST   -Y,R31
0003e4 93ea      	ST   -Y,R30
0003e5 931a      	ST   -Y,R17
0003e6 930a      	ST   -Y,R16
0003e7 e5e1      	LDI  R30,LOW(_put_buff_G100)
0003e8 e0f2      	LDI  R31,HIGH(_put_buff_G100)
0003e9 93fa      	ST   -Y,R31
0003ea 93ea      	ST   -Y,R30
0003eb 01de      	MOVW R26,R28
0003ec 961a      	ADIW R26,10
0003ed dea3      	RCALL __print_G100
0003ee 019f      	MOVW R18,R30
0003ef 81ae      	LDD  R26,Y+6
0003f0 81bf      	LDD  R27,Y+6+1
0003f1 e0e0      	LDI  R30,LOW(0)
0003f2 93ec      	ST   X,R30
0003f3 01f9      	MOVW R30,R18
                 _0x2080002:
0003f4 940e 05a9 	CALL __LOADLOCR4
0003f6 962a      	ADIW R28,10
0003f7 90ff      	POP  R15
0003f8 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0003f9 93aa      	ST   -Y,R26
0003fa b3eb      	IN   R30,0x1B
0003fb 70ef      	ANDI R30,LOW(0xF)
0003fc 2fae      	MOV  R26,R30
0003fd 81e8      	LD   R30,Y
0003fe 7fe0      	ANDI R30,LOW(0xF0)
0003ff 2bea      	OR   R30,R26
000400 bbeb      	OUT  0x1B,R30
                +
000401 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000402 958a     +DEC R24
000403 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000404 9ada      	SBI  0x1B,2
                +
000405 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000406 958a     +DEC R24
000407 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000408 98da      	CBI  0x1B,2
                +
000409 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00040a 958a     +DEC R24
00040b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00040c c088      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00040d 93aa      	ST   -Y,R26
00040e 81a8      	LD   R26,Y
00040f dfe9      	RCALL __lcd_write_nibble_G101
000410 81e8          ld    r30,y
000411 95e2          swap  r30
000412 83e8          st    y,r30
000413 81a8      	LD   R26,Y
000414 dfe4      	RCALL __lcd_write_nibble_G101
                +
000415 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000416 958a     +DEC R24
000417 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000418 c07c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000419 93aa      	ST   -Y,R26
00041a 81e8      	LD   R30,Y
00041b e0f0      	LDI  R31,0
00041c 54ee      	SUBI R30,LOW(-__base_y_G101)
00041d 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00041e 81e0      	LD   R30,Z
00041f 81a9      	LDD  R26,Y+1
000420 0fae      	ADD  R26,R30
000421 dfeb      	RCALL __lcd_write_data
000422 81e9      	LDD  R30,Y+1
000423 93e0 02b6 	STS  __lcd_x,R30
000425 81e8      	LD   R30,Y
000426 93e0 02b7 	STS  __lcd_y,R30
000428 9622      	ADIW R28,2
000429 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00042a e0a2      	LDI  R26,LOW(2)
00042b 940e 0535 	CALL SUBOPT_0x11
00042d e0ac      	LDI  R26,LOW(12)
00042e dfde      	RCALL __lcd_write_data
00042f e0a1      	LDI  R26,LOW(1)
000430 940e 0535 	CALL SUBOPT_0x11
000432 e0e0      	LDI  R30,LOW(0)
000433 93e0 02b7 	STS  __lcd_y,R30
000435 93e0 02b6 	STS  __lcd_x,R30
000437 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000438 93aa      	ST   -Y,R26
000439 81a8      	LD   R26,Y
00043a 30aa      	CPI  R26,LOW(0xA)
00043b f031      	BREQ _0x2020005
00043c 91e0 02b8 	LDS  R30,__lcd_maxx
00043e 91a0 02b6 	LDS  R26,__lcd_x
000440 17ae      	CP   R26,R30
000441 f060      	BRLO _0x2020004
                 _0x2020005:
000442 e0e0      	LDI  R30,LOW(0)
000443 93ea      	ST   -Y,R30
000444 91a0 02b7 	LDS  R26,__lcd_y
000446 5faf      	SUBI R26,-LOW(1)
000447 93a0 02b7 	STS  __lcd_y,R26
000449 dfcf      	RCALL _lcd_gotoxy
00044a 81a8      	LD   R26,Y
00044b 30aa      	CPI  R26,LOW(0xA)
00044c f409      	BRNE _0x2020007
00044d c047      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
00044e 91e0 02b6 	LDS  R30,__lcd_x
000450 5fef      	SUBI R30,-LOW(1)
000451 93e0 02b6 	STS  __lcd_x,R30
000453 9ad8      	SBI  0x1B,0
000454 81a8      	LD   R26,Y
000455 dfb7      	RCALL __lcd_write_data
000456 98d8      	CBI  0x1B,0
000457 c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000458 93ba      	ST   -Y,R27
000459 93aa      	ST   -Y,R26
00045a 931a      	ST   -Y,R17
                 _0x2020008:
00045b 81a9      	LDD  R26,Y+1
00045c 81ba      	LDD  R27,Y+1+1
00045d 91ed      	LD   R30,X+
00045e 83a9      	STD  Y+1,R26
00045f 83ba      	STD  Y+1+1,R27
000460 2f1e      	MOV  R17,R30
000461 30e0      	CPI  R30,0
000462 f019      	BREQ _0x202000A
000463 2fa1      	MOV  R26,R17
000464 dfd3      	RCALL _lcd_putchar
000465 cff5      	RJMP _0x2020008
                 _0x202000A:
000466 8118      	LDD  R17,Y+0
000467 9623      	ADIW R28,3
000468 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000469 93aa      	ST   -Y,R26
00046a b3ea      	IN   R30,0x1A
00046b 6fe0      	ORI  R30,LOW(0xF0)
00046c bbea      	OUT  0x1A,R30
00046d 9ad2      	SBI  0x1A,2
00046e 9ad0      	SBI  0x1A,0
00046f 9ad1      	SBI  0x1A,1
000470 98da      	CBI  0x1B,2
000471 98d8      	CBI  0x1B,0
000472 98d9      	CBI  0x1B,1
000473 81e8      	LD   R30,Y
000474 93e0 02b8 	STS  __lcd_maxx,R30
000476 58e0      	SUBI R30,-LOW(128)
                +
000477 93e0 02b4+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000479 81e8      	LD   R30,Y
00047a 54e0      	SUBI R30,-LOW(192)
                +
00047b 93e0 02b5+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00047d e1a4      	LDI  R26,LOW(20)
00047e e0b0      	LDI  R27,0
00047f 940e 0542 	CALL _delay_ms
000481 940e 053b 	CALL SUBOPT_0x12
000483 940e 053b 	CALL SUBOPT_0x12
000485 940e 053b 	CALL SUBOPT_0x12
000487 e2a0      	LDI  R26,LOW(32)
000488 df70      	RCALL __lcd_write_nibble_G101
                +
000489 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00048a 958a     +DEC R24
00048b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00048c e2a8      	LDI  R26,LOW(40)
00048d df7f      	RCALL __lcd_write_data
00048e e0a4      	LDI  R26,LOW(4)
00048f df7d      	RCALL __lcd_write_data
000490 e8a5      	LDI  R26,LOW(133)
000491 df7b      	RCALL __lcd_write_data
000492 e0a6      	LDI  R26,LOW(6)
000493 df79      	RCALL __lcd_write_data
000494 df95      	RCALL _lcd_clear
                 _0x2080001:
000495 9621      	ADIW R28,1
000496 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000497 93ba      	ST   -Y,R27
000498 93aa      	ST   -Y,R26
000499 91a9          ld   r26,y+
00049a 91b9          ld   r27,y+
00049b 27ee          clr  r30
00049c 27ff          clr  r31
                 strlen0:
00049d 916d          ld   r22,x+
00049e 2366          tst  r22
00049f f011          breq strlen1
0004a0 9631          adiw r30,1
0004a1 cffb          rjmp strlen0
                 strlen1:
0004a2 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004a3 93ba      	ST   -Y,R27
0004a4 93aa      	ST   -Y,R26
0004a5 27aa          clr  r26
0004a6 27bb          clr  r27
0004a7 91e9          ld   r30,y+
0004a8 91f9          ld   r31,y+
                 strlenf0:
0004a9 9005      	lpm  r0,z+
0004aa 2000          tst  r0
0004ab f011          breq strlenf1
0004ac 9611          adiw r26,1
0004ad cffb          rjmp strlenf0
                 strlenf1:
0004ae 01fd          movw r30,r26
0004af 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _alarmSecond:
000260           	.BYTE 0x2
                 _timerHour:
000262           	.BYTE 0x2
                 _timerMinute:
000264           	.BYTE 0x2
                 _timerSecond:
000266           	.BYTE 0x2
                 _modes:
000268           	.BYTE 0x1E
                 _modeInd:
000286           	.BYTE 0x2
                 _alarmsHour:
000288           	.BYTE 0x14
                 _alarmsMin:
00029c           	.BYTE 0x14
                 _alarmInd:
0002b0           	.BYTE 0x2
                 __base_y_G101:
0002b2           	.BYTE 0x4
                 __lcd_x:
0002b6           	.BYTE 0x1
                 __lcd_y:
0002b7           	.BYTE 0x1
                 __lcd_maxx:
0002b8           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x0:
0004b0 920a      	ST   -Y,R0
0004b1 921a      	ST   -Y,R1
0004b2 92fa      	ST   -Y,R15
0004b3 936a      	ST   -Y,R22
0004b4 937a      	ST   -Y,R23
0004b5 938a      	ST   -Y,R24
0004b6 939a      	ST   -Y,R25
0004b7 93aa      	ST   -Y,R26
0004b8 93ba      	ST   -Y,R27
0004b9 93ea      	ST   -Y,R30
0004ba 93fa      	ST   -Y,R31
0004bb b7ef      	IN   R30,SREG
0004bc 93ea      	ST   -Y,R30
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0004be 01f3      	MOVW R30,R6
0004bf 9631      	ADIW R30,1
0004c0 013f      	MOVW R6,R30
0004c1 e3ec      	LDI  R30,LOW(60)
0004c2 e0f0      	LDI  R31,HIGH(60)
0004c3 166e      	CP   R6,R30
0004c4 067f      	CPC  R7,R31
0004c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0004c6 2466      	CLR  R6
0004c7 2477      	CLR  R7
0004c8 01f2      	MOVW R30,R4
0004c9 9631      	ADIW R30,1
0004ca 012f      	MOVW R4,R30
0004cb e1e8      	LDI  R30,LOW(24)
0004cc e0f0      	LDI  R31,HIGH(24)
0004cd 164e      	CP   R4,R30
0004ce 065f      	CPC  R5,R31
0004cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
0004d0 91e0 0286 	LDS  R30,_modeInd
0004d2 91f0 0287 	LDS  R31,_modeInd+1
0004d4 9730      	SBIW R30,0
0004d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
0004d6 925a      	ST   -Y,R5
0004d7 924a      	ST   -Y,R4
0004d8 927a      	ST   -Y,R7
0004d9 926a      	ST   -Y,R6
0004da 01d4      	MOVW R26,R8
0004db 940c 01e2 	JMP  _showTime
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
0004dd 91a0 0286 	LDS  R26,_modeInd
0004df 91b0 0287 	LDS  R27,_modeInd+1
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0004e2 91e0 02b0 	LDS  R30,_alarmInd
0004e4 91f0 02b1 	LDS  R31,_alarmInd+1
0004e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0004e7 92ba      	ST   -Y,R11
0004e8 92aa      	ST   -Y,R10
0004e9 92da      	ST   -Y,R13
0004ea 92ca      	ST   -Y,R12
0004eb 91a0 0260 	LDS  R26,_alarmSecond
0004ed 91b0 0261 	LDS  R27,_alarmSecond+1
0004ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
0004f0 e0ea      	LDI  R30,LOW(10)
0004f1 e0f0      	LDI  R31,HIGH(10)
0004f2 940e 0572 	CALL __DIVW21
0004f4 940e 0554 	CALL __CWD1
0004f6 940e 059b 	CALL __PUTPARD1
0004f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
0004f9 e0ea      	LDI  R30,LOW(10)
0004fa e0f0      	LDI  R31,HIGH(10)
0004fb 940e 0577 	CALL __MODW21
0004fd 940e 0554 	CALL __CWD1
0004ff 940e 059b 	CALL __PUTPARD1
000501 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000502 0fee      	LSL  R30
000503 1fff      	ROL  R31
000504 0fae      	ADD  R26,R30
000505 1fbf      	ADC  R27,R31
000506 940e 0593 	CALL __GETW1P
000508 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB:
000509 932a      	ST   -Y,R18
00050a 85ad      	LDD  R26,Y+13
00050b 85be      	LDD  R27,Y+13+1
00050c 85ef      	LDD  R30,Y+15
00050d 89f8      	LDD  R31,Y+15+1
00050e 9509      	ICALL
00050f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
000510 89e8      	LDD  R30,Y+16
000511 89f9      	LDD  R31,Y+16+1
000512 9734      	SBIW R30,4
000513 8be8      	STD  Y+16,R30
000514 8bf9      	STD  Y+16+1,R31
000515 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000516 85ad      	LDD  R26,Y+13
000517 85be      	LDD  R27,Y+13+1
000518 85ef      	LDD  R30,Y+15
000519 89f8      	LDD  R31,Y+15+1
00051a 9509      	ICALL
00051b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
00051c 89a8      	LDD  R26,Y+16
00051d 89b9      	LDD  R27,Y+16+1
00051e 9614      	ADIW R26,4
00051f 940e 0593 	CALL __GETW1P
000521 83ee      	STD  Y+6,R30
000522 83ff      	STD  Y+6+1,R31
000523 81ae      	LDD  R26,Y+6
000524 81bf      	LDD  R27,Y+6+1
000525 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
000526 89a8      	LDD  R26,Y+16
000527 89b9      	LDD  R27,Y+16+1
000528 9614      	ADIW R26,4
000529 940e 0593 	CALL __GETW1P
00052b 87ea      	STD  Y+10,R30
00052c 87fb      	STD  Y+10+1,R31
00052d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
00052e 01de      	MOVW R26,R28
00052f 961c      	ADIW R26,12
000530 940e 054c 	CALL __ADDW2R15
000532 940e 0593 	CALL __GETW1P
000534 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000535 940e 040d 	CALL __lcd_write_data
000537 e0a3      	LDI  R26,LOW(3)
000538 e0b0      	LDI  R27,0
000539 940c 0542 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
00053b e3a0      	LDI  R26,LOW(48)
00053c 940e 03f9 	CALL __lcd_write_nibble_G101
                +
00053e e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00053f 958a     +DEC R24
000540 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000541 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000542 9610      	adiw r26,0
000543 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000544 ef8a     +LDI R24 , LOW ( 0xFA )
000545 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000546 9701     +SBIW R24 , 1
000547 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000548 95a8      	wdr
000549 9711      	sbiw r26,1
00054a f7c9      	brne __delay_ms0
                 __delay_ms1:
00054b 9508      	ret
                 
                 __ADDW2R15:
00054c 2400      	CLR  R0
00054d 0daf      	ADD  R26,R15
00054e 1db0      	ADC  R27,R0
00054f 9508      	RET
                 
                 __ANEGW1:
000550 95f1      	NEG  R31
000551 95e1      	NEG  R30
000552 40f0      	SBCI R31,0
000553 9508      	RET
                 
                 __CWD1:
000554 2f6f      	MOV  R22,R31
000555 0f66      	ADD  R22,R22
000556 0b66      	SBC  R22,R22
000557 2f76      	MOV  R23,R22
000558 9508      	RET
                 
                 __MULB1W2U:
000559 2f6e      	MOV  R22,R30
00055a 9f6a      	MUL  R22,R26
00055b 01f0      	MOVW R30,R0
00055c 9f6b      	MUL  R22,R27
00055d 0df0      	ADD  R31,R0
00055e 9508      	RET
                 
                 __DIVW21U:
00055f 2400      	CLR  R0
000560 2411      	CLR  R1
000561 e190      	LDI  R25,16
                 __DIVW21U1:
000562 0faa      	LSL  R26
000563 1fbb      	ROL  R27
000564 1c00      	ROL  R0
000565 1c11      	ROL  R1
000566 1a0e      	SUB  R0,R30
000567 0a1f      	SBC  R1,R31
000568 f418      	BRCC __DIVW21U2
000569 0e0e      	ADD  R0,R30
00056a 1e1f      	ADC  R1,R31
00056b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00056c 60a1      	SBR  R26,1
                 __DIVW21U3:
00056d 959a      	DEC  R25
00056e f799      	BRNE __DIVW21U1
00056f 01fd      	MOVW R30,R26
000570 01d0      	MOVW R26,R0
000571 9508      	RET
                 
                 __DIVW21:
000572 d012      	RCALL __CHKSIGNW
000573 dfeb      	RCALL __DIVW21U
000574 f40e      	BRTC __DIVW211
000575 dfda      	RCALL __ANEGW1
                 __DIVW211:
000576 9508      	RET
                 
                 __MODW21:
000577 94e8      	CLT
000578 ffb7      	SBRS R27,7
000579 c004      	RJMP __MODW211
00057a 95a0      	COM  R26
00057b 95b0      	COM  R27
00057c 9611      	ADIW R26,1
00057d 9468      	SET
                 __MODW211:
00057e fdf7      	SBRC R31,7
00057f dfd0      	RCALL __ANEGW1
000580 dfde      	RCALL __DIVW21U
000581 01fd      	MOVW R30,R26
000582 f40e      	BRTC __MODW212
000583 dfcc      	RCALL __ANEGW1
                 __MODW212:
000584 9508      	RET
                 
                 __CHKSIGNW:
000585 94e8      	CLT
000586 fff7      	SBRS R31,7
000587 c002      	RJMP __CHKSW1
000588 dfc7      	RCALL __ANEGW1
000589 9468      	SET
                 __CHKSW1:
00058a ffb7      	SBRS R27,7
00058b c006      	RJMP __CHKSW2
00058c 95a0      	COM  R26
00058d 95b0      	COM  R27
00058e 9611      	ADIW R26,1
00058f f800      	BLD  R0,0
000590 9403      	INC  R0
000591 fa00      	BST  R0,0
                 __CHKSW2:
000592 9508      	RET
                 
                 __GETW1P:
000593 91ed      	LD   R30,X+
000594 91fc      	LD   R31,X
000595 9711      	SBIW R26,1
000596 9508      	RET
                 
                 __GETW1PF:
000597 9005      	LPM  R0,Z+
000598 91f4      	LPM  R31,Z
000599 2de0      	MOV  R30,R0
00059a 9508      	RET
                 
                 __PUTPARD1:
00059b 937a      	ST   -Y,R23
00059c 936a      	ST   -Y,R22
00059d 93fa      	ST   -Y,R31
00059e 93ea      	ST   -Y,R30
00059f 9508      	RET
                 
                 __SAVELOCR6:
0005a0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005a1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005a2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005a3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005a4 931a      	ST   -Y,R17
0005a5 930a      	ST   -Y,R16
0005a6 9508      	RET
                 
                 __LOADLOCR6:
0005a7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005a8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005a9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005aa 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005ab 8119      	LDD  R17,Y+1
0005ac 8108      	LD   R16,Y
0005ad 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  37 r1 :   7 r2 :   0 r3 :   0 r4 :  14 r5 :   8 r6 :  13 r7 :   7 
r8 :   8 r9 :   3 r10:  11 r11:   5 r12:  11 r13:   5 r14:   0 r15:   6 
r16:  40 r17:  28 r18:  32 r19:  11 r20:   9 r21:  17 r22:  16 r23:   4 
r24:  25 r25:   7 r26: 144 r27:  63 r28:  19 r29:   1 r30: 322 r31: 107 
x  :  23 y  : 224 z  :  19 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   9 
adiw  :  38 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  19 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   9 brmi  :   1 brne  :  40 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  97 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  25 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  16 cpc   :  14 cpi   :  33 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  24 ld    :  38 ldd   :  87 ldi   : 146 
lds   :  28 lpm   :  14 lsl   :   4 lsr   :   0 mov   :  18 movw  :  50 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   8 out   :  47 pop   :   1 push  :   1 rcall :  25 ret   :  42 
reti  :   1 rjmp  :  72 rol   :   6 ror   :   0 sbc   :   3 sbci  :   4 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :  29 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  96 std   :  33 sts   :  31 sub   :   2 subi  :  20 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 67 out of 116 (57.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b5c   2816     92   2908   32768   8.9%
[.dseg] 0x000060 0x0002b9      0     89     89    2048   4.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
