;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <alcd.h>
;
;#define LED PORTC.0
;
;int showTime(int hour,int minute,int second);
;int checkAlarms();
;int hour = 0;
;int minute = 0;
;int second = 0;
;
;int alarmHour = 0;
;int alarmMinute = 0;
;int alarmSecond = 0;
;
;int timerHour = 0;
;int timerMinute = 0;
;int timerSecond = 0;
;
;unsigned char modes[3][10] = {"clock","alarm", "timer"};

	.DSEG
;int modeInd = 0;
;int alarmsHour[10];
;int alarmsMin[10];
;int alarmInd = 0;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E     // Reinitialize Timer1 value
; 0000 001F     TCNT1H=0xCEFF >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0020     TCNT1L=0xCEFF & 0xff;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0021     second = second + 1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0022     if(second >= 60){
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0023         second = 0;
;PCODE: $00000019 VOL: 0
; 0000 0024         minute += 1;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0025         if(minute >= 60){
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0026                 minute = 0;
;PCODE: $00000020 VOL: 0
; 0000 0027                 hour += 1;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0028                 if(hour >= 24)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0029                     hour = 0;
;PCODE: $00000027 VOL: 0
; 0000 002A         }
;PCODE: $00000028 VOL: 0
; 0000 002B     }
;PCODE: $00000029 VOL: 0
; 0000 002C     if(modeInd == 0 )
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002D         showTime(hour,minute,second);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002E 
; 0000 002F 
; 0000 0030 
; 0000 0031     if(modeInd == 2){
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0032         timerSecond = timerSecond + 1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0033         if(timerSecond >= 60){
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0034             timerSecond = 0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0035             timerMinute += 1;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0036             if(timerMinute >= 60){
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0037                     timerMinute = 0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0038                     timerHour += 1;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0039             }
; 0000 003A         }
;PCODE: $00000049 VOL: 0
; 0000 003B     showTime(timerHour,timerMinute,timerSecond);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003C     }
; 0000 003D     checkAlarms();
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003E }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0042 {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0043     if(modeInd == 1){ //alarm mode to timer mode (save alarm,start timer)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0044         alarmsHour[alarmInd] = alarmHour;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0045         alarmsMin[alarmInd] = alarmMinute;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0046         alarmInd +=1;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0047 
; 0000 0048          timerHour = 0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0049         timerMinute = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 004A         timerSecond = 0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 004B        }
; 0000 004C 
; 0000 004D     else if(modeInd == 0){  //clock mode to alarm mode(set alarm mode conditions)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004E         alarmHour = hour;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 004F         alarmMinute = minute;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0050         alarmSecond = second;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0051         }
; 0000 0052 
; 0000 0053     modeInd = (modeInd+1)%3;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0054     showTime(hour,minute,second);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0055 
; 0000 0056 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 005A {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 005B     if(modeInd == 0){
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 005C         minute += 1;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 005D         if(minute >= 60){
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 005E             minute = 0;
;PCODE: $00000092 VOL: 0
; 0000 005F             hour += 1;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0060             if(hour >= 24)
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0061                 hour = 0;
;PCODE: $00000099 VOL: 0
; 0000 0062         }
;PCODE: $0000009A VOL: 0
; 0000 0063         showTime(hour,minute,second);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0064     }
; 0000 0065 
; 0000 0066     else if(modeInd==1){
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0067     alarmMinute += 1;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0068     if(alarmMinute >= 60){
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0069         alarmMinute = 0;
;PCODE: $000000AB VOL: 0
; 0000 006A         alarmHour += 1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 006B         if(alarmHour >= 24)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 006C             alarmHour = 0;
;PCODE: $000000B2 VOL: 0
; 0000 006D     }
;PCODE: $000000B3 VOL: 0
; 0000 006E     showTime(alarmHour,alarmMinute,alarmSecond);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 006F     }
; 0000 0070 }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0074 {
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0075 // Place your code here
; 0000 0076   if(modeInd==0){
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0077       minute-=1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0078       if(minute<0){
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0079           minute = 59;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 007A           hour-=1;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 007B           if(hour<0)
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 007C             hour = 23;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 007D           }
;PCODE: $000000D1 VOL: 0
; 0000 007E       showTime(hour,minute,second);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 007F   }
; 0000 0080   else if(modeInd==1){
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0081   {
; 0000 0082       alarmMinute-=1;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0083       if(alarmMinute<0){
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0084           alarmMinute = 59;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0085           alarmHour-=1;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0086           if(alarmHour<0)
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0087             alarmHour = 23;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0088           }
;PCODE: $000000EA VOL: 0
; 0000 0089       showTime(alarmHour,alarmMinute,alarmSecond);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 008A   }
; 0000 008B   }
; 0000 008C }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;
;
;void main(void)
; 0000 0090 {
;PCODE: $000000F5 VOL: 0
; 0000 0091 DDRA  = 0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0092 PORTA = 0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0093 DDRB  = 0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0094 PORTB = 0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0095 
; 0000 0096 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0097 DDRC  = (0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0098 PORTC = 0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0099 
; 0000 009A DDRD  = 0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 009B PORTD = 0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 009C 
; 0000 009D //Time/counter 0
; 0000 009E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 009F TCNT0=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00A0 OCR0=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00A1 
; 0000 00A2 
; 0000 00A3 // Timer/Counter 1 initialization
; 0000 00A4 // Clock source: System Clock
; 0000 00A5 // Clock value: 15.625 kHz
; 0000 00A6 // Mode: Normal top=0xFFFF
; 0000 00A7 // OC1A output: Disconnected
; 0000 00A8 // OC1B output: Disconnected
; 0000 00A9 // Noise Canceler: Off
; 0000 00AA // Input Capture on Falling Edge
; 0000 00AB // Timer Period: 1 s
; 0000 00AC // Timer1 Overflow Interrupt: On
; 0000 00AD // Input Capture Interrupt: Off
; 0000 00AE // Compare A Match Interrupt: Off
; 0000 00AF // Compare B Match Interrupt: Off
; 0000 00B0 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00B1 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00B2 TCNT1H=0xCE;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00B3 TCNT1L=0xFF;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00B4 ICR1H=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00B5 ICR1L=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00B6 OCR1AH=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00B7 OCR1AL=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00B8 OCR1BH=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00B9 OCR1BL=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00BA 
; 0000 00BB // Timer/Counter 2 initialization
; 0000 00BC ASSR=0<<AS2;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00BD TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00BE TCNT2=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00BF OCR2=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00C0 
; 0000 00C1 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C2 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00C3 
; 0000 00C4 // External Interrupt(s) initialization
; 0000 00C5 // INT0: On
; 0000 00C6 // INT0 Mode: Rising Edge
; 0000 00C7 // INT1: On
; 0000 00C8 // INT1 Mode: Rising Edge
; 0000 00C9 // INT2: On
; 0000 00CA // INT2 Mode: Rising Edge
; 0000 00CB GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00CC MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00CD MCUCSR=(1<<ISC2);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00CE GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00CF 
; 0000 00D0 // USART initialization
; 0000 00D1 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00D2 
; 0000 00D3 // Analog Comparator initialization
; 0000 00D4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00D5 SFIOR=(0<<ACME);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00D6 
; 0000 00D7 // ADC initialization
; 0000 00D8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00D9 
; 0000 00DA // SPI initialization
; 0000 00DB SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00DC 
; 0000 00DD // TWI initialization
; 0000 00DE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00DF 
; 0000 00E0 // Alphanumeric LCD initialization
; 0000 00E1 // Connections are specified in the
; 0000 00E2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00E3 // RS - PORTA Bit 0
; 0000 00E4 // RD - PORTA Bit 1
; 0000 00E5 // EN - PORTA Bit 2
; 0000 00E6 // D4 - PORTA Bit 4
; 0000 00E7 // D5 - PORTA Bit 5
; 0000 00E8 // D6 - PORTA Bit 6
; 0000 00E9 // D7 - PORTA Bit 7
; 0000 00EA // Characters/line: 8
; 0000 00EB lcd_init(8);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00EC 
; 0000 00ED // Global enable interrupts
; 0000 00EE #asm("sei")
;PCODE: $00000141 VOL: 0
	sei
;PCODE: $00000142 VOL: 0
; 0000 00EF 
; 0000 00F0 while (1)
;PCODE: $00000143 VOL: 0
; 0000 00F1       {
; 0000 00F2       // Place your code here
; 0000 00F3 
; 0000 00F4       }
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00F5 }
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;
; int showTime(int hour,int minute,int second){
; 0000 00F7 int showTime(int hour,int minute,int second){
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00F8     unsigned char time[15];
; 0000 00F9     lcd_gotoxy(0,0);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;	hour -> Y+19
;	minute -> Y+17
;	second -> Y+15
;	time -> Y+0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00FA     lcd_puts(modes[modeInd]);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00FB     lcd_gotoxy(0,1);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00FC     sprintf(time,"%d%d:%d%d:%d%d",hour/10,hour%10,minute/10,minute%10,second/10,second%10);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00FD     lcd_puts(time);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00FE     return 0;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00FF }
;PCODE: $00000187 VOL: 0
;
;
;int checkAlarms(){
; 0000 0102 int checkAlarms(){
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0103 int i = 0;
; 0000 0104 int flag = 0;
; 0000 0105 for(i=0;i<alarmInd;i++){
;PCODE: $0000018A VOL: 0
;	i -> R16,R17
;	flag -> R18,R19
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0106     if(alarmsHour[i]==hour && minute==alarmsMin[i]) {
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0107     LED=1;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0108     flag = 1;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0109     }
; 0000 010A }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 010B if(flag==0)
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 010C     LED = 0;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 010D return 0;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 010E }
;PCODE: $000001BD VOL: 0
